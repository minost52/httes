package loadtest

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
	"go.ddosify.com/ddosify/core/proxy"
	"go.ddosify.com/ddosify/core/report"
	"go.ddosify.com/ddosify/core/types"
)

var isRunning bool
var testCtx context.Context
var testCancel context.CancelFunc
var reportService report.ReportService // –°–æ—Ö—Ä–∞–Ω—è–µ–º reportService –¥–ª—è –≤—ã–∑–æ–≤–∞ Stop()

// showErrorDialog –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
func showErrorDialog(msg string) {
	fyne.Do(func() {
		dialog := widget.NewLabel(msg)
		w := fyne.CurrentApp().NewWindow("Error")
		w.SetContent(container.NewVBox(dialog))
		w.Show()
	})
}

// setupStartButton –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Start"
func setupStartButton(startBtn, stopBtn *widget.Button, debugCheck *widget.Check) {
	startBtn.OnTapped = func() {
		if isRunning {
			showErrorDialog("–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
			return
		}
		isRunning = true
		defer func() { isRunning = false }()

		// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
		testCtx, testCancel = context.WithCancel(context.Background())

		// –§–æ—Ä–º–∏—Ä—É–µ–º URL
		targetURL := strings.ToLower(protocolSelect.Selected) + "://" + urlEntry.Text
		parsedURL, err := url.ParseRequestURI(targetURL)
		if err != nil || parsedURL.Host == "" {
			showErrorDialog("Target URL is invalid: " + targetURL)
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è
		step := types.ScenarioStep{
			ID:      1,
			Method:  strings.ToUpper(methodSelect.Selected),
			URL:     targetURL,
			Timeout: 30,
			Headers: map[string]string{},
		}
		scenario := types.Scenario{Steps: []types.ScenarioStep{step}}

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
		var proxyAddr *url.URL
		if proxyEntry.Text != "" {
			proxyAddr, err = url.Parse(proxyEntry.Text)
			if err != nil {
				showErrorDialog("Invalid proxy URL")
				return
			}
		}
		p := proxy.Proxy{
			Strategy: proxy.ProxyTypeSingle,
			Addr:     proxyAddr,
		}

		// –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Heart
		h := types.Heart{
			IterationCount:    parseInt(reqCount.Text),
			LoadType:          strings.ToLower(loadType.Selected),
			TestDuration:      parseInt(duration.Text),
			Scenario:          scenario,
			Proxy:             p,
			ReportDestination: "gui",
			Debug:             debugCheck.Checked,
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º GUI
		fyne.Do(func() {
			startBtn.Disable()
			stopBtn.Enable()
			resultOutput.SetText("üöÄ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω...")
		})

		// –°–æ–∑–¥–∞—ë–º resultGrid –¥–ª—è –æ—Ç—á–µ—Ç–∞
		resultGrid := widget.NewTextGrid()
		resultGrid.SetText("TEST: GUI initialization")

		// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ–Ω–µ
		go func() {
			var err error
			reportService, err = report.NewReportService(h.ReportDestination, resultGrid)
			if err != nil {
				showErrorDialog("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–∞: " + err.Error())
				fyne.Do(func() {
					startBtn.Enable()
					stopBtn.Disable()
				})
				return
			}
			err = RunLoadTest(testCtx, testCancel, h, reportService)
			if err != nil {
				showErrorDialog("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, RunLoadTest: " + err.Error())
			}

			fyne.Do(func() {
				startBtn.Enable()
				stopBtn.Disable()
				resultOutput.SetText("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
			})
		}()
	}
}

// setupStopButton –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Stop"
func setupStopButton(startBtn, stopBtn *widget.Button) {
	stopBtn.OnTapped = func() {
		if testCancel != nil {
			testCancel()
		}
		if reportService != nil {
			reportService.Stop()
		}

		fyne.Do(func() {
			startBtn.Enable()
			stopBtn.Disable()
			resultOutput.SetText("üõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
		})
	}
}

// createButtons —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —á–µ–∫–±–æ–∫—Å–æ–º Debug
func createButtons() *fyne.Container {
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
	startBtn := widget.NewButton("Start Load Test", nil)
	stopBtn := widget.NewButton("Stop", nil)

	// –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è Debug
	debugCheck := widget.NewCheck("Debug Mode", nil)
	debugCheck.Checked = false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ–±–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

	// –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É Stop –≤ –Ω–∞—á–∞–ª–µ
	stopBtn.Disable()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	setupStartButton(startBtn, stopBtn, debugCheck)
	setupStopButton(startBtn, stopBtn)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —á–µ–∫–±–æ–∫—Å–æ–º
	return container.NewHBox(startBtn, stopBtn, debugCheck)
}

func parseInt(s string) int {
	i, err := strconv.Atoi(s)
	if err != nil {
		fmt.Printf("Invalid number %s: %v\n", s, err)
		return 0 // –ò–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
	}
	return i
}
